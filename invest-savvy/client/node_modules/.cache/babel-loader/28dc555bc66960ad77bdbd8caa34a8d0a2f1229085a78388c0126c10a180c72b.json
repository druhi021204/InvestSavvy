{"ast":null,"code":"// // https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\n\n// import React, { useEffect, useState } from \"react\";\n// // import invest from '../pictures/invest.jpeg';\n\n// const Stocks = () => {\n//   const [stocks, setStocks] = useState([]);\n\n//   const fetchData = async () => {\n//     let resonse = await fetch(\n//       \" https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//     );\n//     let data = await resonse.json();\n//     // console.log(data)\n//     setStocks(data);\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//     <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//           <div className=\"mainDiv\">\n//       {stocks.map((ele) => {\n//         // console.log(ele)\n//         return (\n//           <>\n//         <div className=\"card\" >\n//               {/* <img src={ele.urlToImage === null ? invest : ele.urlToImage} class=\"card-img-top\" alt=\"...\" /> */}\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 {/* <h5 className=\"card-title\">{ele.author === \"\" ? \"Janelle Ash\" : ele.author}</h5> */}\n//                 <p className=\"card-text\">\n//                  {ele.name}\n//                  {/* {ele.price}\n//                  {ele.exchange}\n//                  {ele.exchangeShortName} */}\n//                 </p>\n//                 {/* <a href={ele.url} target=\"_blank\" className=\"btn btn-primary\">\n//                   Read More\n//                 </a> */}\n//               </div>\n//             </div>\n//           </>\n//         );\n//     })}\n//     </div>\n//     </>\n//   );\n// };\n\n// export default Stocks;\n\n// import React, { useEffect, useState } from \"react\";\n\n// const Stocks = () => {\n//   const [stocks, setStocks] = useState([]);\n\n//   const fetchData = async () => {\n//     try {\n//       let response = await fetch(\n//         \"https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//       );\n//       let data = await response.json();\n//       setStocks(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {stocks.length > 0 ? (\n//           stocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>Loading...</p>\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Stocks;\n\n// import React, { useEffect, useState } from \"react\";\n// import { debounce } from 'lodash';\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   const fetchData = debounce(async () => {\n//     console.log(\"fetching data\")\n//     try {\n//       let response = await fetch(\n//         \"https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//       );\n//       let data = await response.json();\n//       console.log(data);\n//       setStocks(data);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//       setLoading(false);\n//     }\n//   }, 300); // Debounce time in milliseconds\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : stocks.length > 0 ? (\n//           stocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { debounce } from 'lodash';\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [currentPage, setCurrentPage] = useState(1);\n\n//   const fetchData = debounce(async () => {\n//     console.log(\"Fetching data for page:\", currentPage);\n//     try {\n//       let response = await fetch(\n//         `https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja&page=${currentPage}`\n//       );\n//       let data = await response.json();\n//       console.log(\"Data received:\", data);\n//       setStocks(data);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//       setLoading(false);\n//     }\n//   }, 300); // Debounce time in milliseconds\n\n//   useEffect(() => {\n//     fetchData();\n//   }, [currentPage]);\n\n//   const memoizedStocks = useMemo(() => stocks, [stocks]);\n\n//   const handlePageChange = (newPage) => {\n//     setCurrentPage(newPage);\n//     setLoading(true); // Set loading to true when changing pages\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"stockdiv\">Get the latest Stock Price</h2>\n//       <div className=\"maindiv\">\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : memoizedStocks.length > 0 ? (\n//           memoizedStocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//                 <p className=\"card-text\">{ele.price}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n\n//         {/* Pagination Controls */}\n//         <div className=\"pagination\">\n//           <button\n//             disabled={currentPage === 1}\n//             onClick={() => handlePageChange(currentPage - 1)}\n//           >\n//             Previous\n//           </button>\n//           <span> Page {currentPage} </span>\n//           <button onClick={() => handlePageChange(currentPage + 1)}>\n//             Next\n//           </button>\n//         </div>\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { debounce } from 'lodash';\n\n// const fetchData = debounce(async (currentPage, pageSize, setStocks, setLoading) => {\n//   try {\n//     const url = `https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja&page=${currentPage}&limit=${pageSize}`;\n//     console.log(\"Fetching data with URL:\", url);\n\n//     let response = await fetch(url);\n//     let data = await response.json();\n//     console.log(\"Data received:\", data);\n\n//     setStocks(data);\n//     setLoading(false);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//     setLoading(false);\n//   }\n// }, 300); // Debounce time in milliseconds\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageSize, setPageSize] = useState(1);\n\n//   useEffect(() => {\n//     fetchData(currentPage, pageSize, setStocks, setLoading);\n//   }, [currentPage, pageSize]);\n\n//   const memoizedStocks = useMemo(() => stocks, [stocks]);\n\n//   const handlePageChange = (newPage) => {\n//     setCurrentPage(newPage);\n//     setLoading(true);\n//   };\n\n//   const handlePageSizeChange = (newPageSize) => {\n//     setPageSize(newPageSize);\n//     setCurrentPage(1);\n//     setLoading(true);\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {/* Controls for changing page size */}\n//         <div className=\"pageSizeControls\">\n//           <label htmlFor=\"pageSize\">Items per page:</label>\n//           <select\n//             id=\"pageSize\"\n//             value={pageSize}\n//             onChange={(e) => handlePageSizeChange(Number(e.target.value))}\n//           >\n//             <option value={5}>5</option>\n//             <option value={10}>10</option>\n//             <option value={20}>20</option>\n//           </select>\n//         </div>\n\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : memoizedStocks && memoizedStocks.length > 0 ? (\n//           memoizedStocks.map((ele) => (\n//             <div className=\"card\" key={ele.symbol}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n\n//         {/* Pagination Controls */}\n//         <div className=\"pagination\">\n//           <button\n//             disabled={currentPage === 1}\n//             onClick={() => handlePageChange(currentPage - 1)}\n//           >\n//             Previous\n//           </button>\n//           <span> Page {currentPage} </span>\n//           <button onClick={() => handlePageChange(currentPage + 1)}>\n//             Next\n//           </button>\n//         </div>\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n// import React, { useState } from \"react\";\n\n// const CompanyDetails = () => {\n//   const [symbol, setSymbol] = useState(\"\");\n//   const [companyDetails, setCompanyDetails] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const fetchCompanyDetails = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n\n//       const response = await fetch(\n//         `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja`\n//       );\n//       const data = await response.json();\n\n//       if (data && data.length > 0) {\n//         setCompanyDetails(data[0]);\n//       } else {\n//         setCompanyDetails(null);\n//         setError(\"Company not found\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching company details:\", error);\n//       setError(\"Error fetching data\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchCompanyDetails();\n//   };\n\n//   return (\n//     <div className=\"getinput\">\n//     <h2> Instantly Discover the Share/Stock Price at Your Fingertips</h2>\n//       <h3>Provide the Company Details</h3>\n//       <form onSubmit={handleSubmit}>\n//         <label required>\n//           Enter Company Symbol:\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\" disabled={loading}>\n//           Get Details\n//         </button>\n//       </form>\n\n//       {loading && <p>Loading...</p>}\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       {companyDetails && (\n//         <div className=\"data\">\n//           <h3>{companyDetails.symbol}</h3>\n//             <div className=\"column1\">\n//             <p>Name: </p>\n//             <p>Price: </p>\n//             <p>Change: </p>\n//             <p>Percentage Change: </p>\n//             <p>Day Low: </p>\n//             <p>Day High: </p>\n//             <p>Year Low: </p>\n//             <p>Year High: </p>\n//             <p>Market Cap: </p>\n//             <p>Price Avg 50: </p>\n//             <p>Price Avg 200: </p>\n//             <p>Exchange: </p>\n//             <p>Volume: </p>\n//             <p>Average Volume: </p>\n//             <p>Open: </p>\n//             <p>Previous Close: \n//             <p>Earnings per Share (EPS): </p>\n//             <p>Price to Earnings (P/E) Ratio: </p>\n//             <p>Earnings Announcement:</p>\n//             <p>Shares Outstanding: </p>\n//             <p>Timestamp: </p>\n//             </div>\n\n//             <div className=\"column2\">\n//             <p>{companyDetails.name}</p>\n//             <p>{companyDetails.price}</p>\n//             <p>{companyDetails.change}</p>\n//             <p>{companyDetails.changesPercentage}%</p>\n//             <p>{companyDetails.dayLow}</p>\n//             <p>{companyDetails.dayHigh}</p>\n//             <p>{companyDetails.yearLow}</p>\n//             <p>{companyDetails.yearHigh}</p>\n//             <p>{companyDetails.marketCap}</p>\n//             <p>{companyDetails.priceAvg50}</p>\n//             <p>{companyDetails.priceAvg200}</p>\n//             <p>{companyDetails.exchange}</p>\n//             <p>{companyDetails.volume}</p>\n//             <p>{companyDetails.avgVolume}</p>\n//             <p>{companyDetails.open}</p>\n//             <p>{companyDetails.previousClose}</p>\n//             <p>{companyDetails.eps}</p>\n//             <p>{companyDetails.pe}</p>\n//             <p>{companyDetails.earningsAnnouncement}</p>\n//             <p>{companyDetails.sharesOutstanding}</p>\n//             <p>{companyDetails.timestamp}</p>\n//             </div>\n\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CompanyDetails;","map":{"version":3,"names":[],"sources":["/home/siddhi/InvestSavvy_coc_inheritance/invest-savvy/client/src/pages/getstock.js"],"sourcesContent":["// // https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\n\n\n// import React, { useEffect, useState } from \"react\";\n// // import invest from '../pictures/invest.jpeg';\n\n\n// const Stocks = () => {\n//   const [stocks, setStocks] = useState([]);\n\n//   const fetchData = async () => {\n//     let resonse = await fetch(\n//       \" https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//     );\n//     let data = await resonse.json();\n//     // console.log(data)\n//     setStocks(data);\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//     <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//           <div className=\"mainDiv\">\n//       {stocks.map((ele) => {\n//         // console.log(ele)\n//         return (\n//           <>\n//         <div className=\"card\" >\n//               {/* <img src={ele.urlToImage === null ? invest : ele.urlToImage} class=\"card-img-top\" alt=\"...\" /> */}\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 {/* <h5 className=\"card-title\">{ele.author === \"\" ? \"Janelle Ash\" : ele.author}</h5> */}\n//                 <p className=\"card-text\">\n//                  {ele.name}\n//                  {/* {ele.price}\n//                  {ele.exchange}\n//                  {ele.exchangeShortName} */}\n//                 </p>\n//                 {/* <a href={ele.url} target=\"_blank\" className=\"btn btn-primary\">\n//                   Read More\n//                 </a> */}\n//               </div>\n//             </div>\n//           </>\n//         );\n//     })}\n//     </div>\n//     </>\n//   );\n// };\n\n// export default Stocks;\n\n// import React, { useEffect, useState } from \"react\";\n\n// const Stocks = () => {\n//   const [stocks, setStocks] = useState([]);\n\n//   const fetchData = async () => {\n//     try {\n//       let response = await fetch(\n//         \"https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//       );\n//       let data = await response.json();\n//       setStocks(data);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {stocks.length > 0 ? (\n//           stocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>Loading...</p>\n//         )}\n//       </div>\n//     </>\n//   );\n// };\n\n// export default Stocks;\n\n// import React, { useEffect, useState } from \"react\";\n// import { debounce } from 'lodash';\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n\n//   const fetchData = debounce(async () => {\n//     console.log(\"fetching data\")\n//     try {\n//       let response = await fetch(\n//         \"https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja\"\n//       );\n//       let data = await response.json();\n//       console.log(data);\n//       setStocks(data);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//       setLoading(false);\n//     }\n//   }, 300); // Debounce time in milliseconds\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : stocks.length > 0 ? (\n//           stocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { debounce } from 'lodash';\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [currentPage, setCurrentPage] = useState(1);\n\n//   const fetchData = debounce(async () => {\n//     console.log(\"Fetching data for page:\", currentPage);\n//     try {\n//       let response = await fetch(\n//         `https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja&page=${currentPage}`\n//       );\n//       let data = await response.json();\n//       console.log(\"Data received:\", data);\n//       setStocks(data);\n//       setLoading(false);\n//     } catch (error) {\n//       console.error(\"Error fetching data:\", error);\n//       setLoading(false);\n//     }\n//   }, 300); // Debounce time in milliseconds\n\n//   useEffect(() => {\n//     fetchData();\n//   }, [currentPage]);\n\n//   const memoizedStocks = useMemo(() => stocks, [stocks]);\n\n//   const handlePageChange = (newPage) => {\n//     setCurrentPage(newPage);\n//     setLoading(true); // Set loading to true when changing pages\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"stockdiv\">Get the latest Stock Price</h2>\n//       <div className=\"maindiv\">\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : memoizedStocks.length > 0 ? (\n//           memoizedStocks.map((ele, index) => (\n//             <div className=\"card\" key={index}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//                 <p className=\"card-text\">{ele.price}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n\n//         {/* Pagination Controls */}\n//         <div className=\"pagination\">\n//           <button\n//             disabled={currentPage === 1}\n//             onClick={() => handlePageChange(currentPage - 1)}\n//           >\n//             Previous\n//           </button>\n//           <span> Page {currentPage} </span>\n//           <button onClick={() => handlePageChange(currentPage + 1)}>\n//             Next\n//           </button>\n//         </div>\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { debounce } from 'lodash';\n\n// const fetchData = debounce(async (currentPage, pageSize, setStocks, setLoading) => {\n//   try {\n//     const url = `https://financialmodelingprep.com/api/v3/stock/list?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja&page=${currentPage}&limit=${pageSize}`;\n//     console.log(\"Fetching data with URL:\", url);\n\n//     let response = await fetch(url);\n//     let data = await response.json();\n//     console.log(\"Data received:\", data);\n\n//     setStocks(data);\n//     setLoading(false);\n//   } catch (error) {\n//     console.error(\"Error fetching data:\", error);\n//     setLoading(false);\n//   }\n// }, 300); // Debounce time in milliseconds\n\n// const Stocks = React.memo(() => {\n//   const [stocks, setStocks] = useState([]);\n//   const [loading, setLoading] = useState(true);\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageSize, setPageSize] = useState(1);\n\n//   useEffect(() => {\n//     fetchData(currentPage, pageSize, setStocks, setLoading);\n//   }, [currentPage, pageSize]);\n\n//   const memoizedStocks = useMemo(() => stocks, [stocks]);\n\n//   const handlePageChange = (newPage) => {\n//     setCurrentPage(newPage);\n//     setLoading(true);\n//   };\n\n//   const handlePageSizeChange = (newPageSize) => {\n//     setPageSize(newPageSize);\n//     setCurrentPage(1);\n//     setLoading(true);\n//   };\n\n//   return (\n//     <>\n//       <h2 className=\"firstdiv\">Get the latest Stock Price</h2>\n//       <div className=\"mainDiv\">\n//         {/* Controls for changing page size */}\n//         <div className=\"pageSizeControls\">\n//           <label htmlFor=\"pageSize\">Items per page:</label>\n//           <select\n//             id=\"pageSize\"\n//             value={pageSize}\n//             onChange={(e) => handlePageSizeChange(Number(e.target.value))}\n//           >\n//             <option value={5}>5</option>\n//             <option value={10}>10</option>\n//             <option value={20}>20</option>\n//           </select>\n//         </div>\n\n//         {loading ? (\n//           <p>Loading...</p>\n//         ) : memoizedStocks && memoizedStocks.length > 0 ? (\n//           memoizedStocks.map((ele) => (\n//             <div className=\"card\" key={ele.symbol}>\n//               <h3>{ele.symbol}</h3>\n//               <div className=\"card-body\">\n//                 <p className=\"card-text\">{ele.name}</p>\n//               </div>\n//             </div>\n//           ))\n//         ) : (\n//           <p>No data available.</p>\n//         )}\n\n//         {/* Pagination Controls */}\n//         <div className=\"pagination\">\n//           <button\n//             disabled={currentPage === 1}\n//             onClick={() => handlePageChange(currentPage - 1)}\n//           >\n//             Previous\n//           </button>\n//           <span> Page {currentPage} </span>\n//           <button onClick={() => handlePageChange(currentPage + 1)}>\n//             Next\n//           </button>\n//         </div>\n//       </div>\n//     </>\n//   );\n// });\n\n// export default Stocks;\n\n\n// import React, { useState } from \"react\";\n\n// const CompanyDetails = () => {\n//   const [symbol, setSymbol] = useState(\"\");\n//   const [companyDetails, setCompanyDetails] = useState(null);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   const fetchCompanyDetails = async () => {\n//     try {\n//       setLoading(true);\n//       setError(null);\n\n//       const response = await fetch(\n//         `https://financialmodelingprep.com/api/v3/quote/${symbol}?apikey=OfWkW6me85Ix6iPN2IpXXpZypva6P6ja`\n//       );\n//       const data = await response.json();\n\n//       if (data && data.length > 0) {\n//         setCompanyDetails(data[0]);\n//       } else {\n//         setCompanyDetails(null);\n//         setError(\"Company not found\");\n//       }\n//     } catch (error) {\n//       console.error(\"Error fetching company details:\", error);\n//       setError(\"Error fetching data\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     fetchCompanyDetails();\n//   };\n\n//   return (\n//     <div className=\"getinput\">\n//     <h2> Instantly Discover the Share/Stock Price at Your Fingertips</h2>\n//       <h3>Provide the Company Details</h3>\n//       <form onSubmit={handleSubmit}>\n//         <label required>\n//           Enter Company Symbol:\n//           <input\n//             type=\"text\"\n//             value={symbol}\n//             onChange={(e) => setSymbol(e.target.value)}\n//           />\n//         </label>\n//         <button type=\"submit\" disabled={loading}>\n//           Get Details\n//         </button>\n//       </form>\n\n//       {loading && <p>Loading...</p>}\n//       {error && <p style={{ color: \"red\" }}>{error}</p>}\n//       {companyDetails && (\n//         <div className=\"data\">\n//           <h3>{companyDetails.symbol}</h3>\n//             <div className=\"column1\">\n//             <p>Name: </p>\n//             <p>Price: </p>\n//             <p>Change: </p>\n//             <p>Percentage Change: </p>\n//             <p>Day Low: </p>\n//             <p>Day High: </p>\n//             <p>Year Low: </p>\n//             <p>Year High: </p>\n//             <p>Market Cap: </p>\n//             <p>Price Avg 50: </p>\n//             <p>Price Avg 200: </p>\n//             <p>Exchange: </p>\n//             <p>Volume: </p>\n//             <p>Average Volume: </p>\n//             <p>Open: </p>\n//             <p>Previous Close: \n//             <p>Earnings per Share (EPS): </p>\n//             <p>Price to Earnings (P/E) Ratio: </p>\n//             <p>Earnings Announcement:</p>\n//             <p>Shares Outstanding: </p>\n//             <p>Timestamp: </p>\n//             </div>\n\n//             <div className=\"column2\">\n//             <p>{companyDetails.name}</p>\n//             <p>{companyDetails.price}</p>\n//             <p>{companyDetails.change}</p>\n//             <p>{companyDetails.changesPercentage}%</p>\n//             <p>{companyDetails.dayLow}</p>\n//             <p>{companyDetails.dayHigh}</p>\n//             <p>{companyDetails.yearLow}</p>\n//             <p>{companyDetails.yearHigh}</p>\n//             <p>{companyDetails.marketCap}</p>\n//             <p>{companyDetails.priceAvg50}</p>\n//             <p>{companyDetails.priceAvg200}</p>\n//             <p>{companyDetails.exchange}</p>\n//             <p>{companyDetails.volume}</p>\n//             <p>{companyDetails.avgVolume}</p>\n//             <p>{companyDetails.open}</p>\n//             <p>{companyDetails.previousClose}</p>\n//             <p>{companyDetails.eps}</p>\n//             <p>{companyDetails.pe}</p>\n//             <p>{companyDetails.earningsAnnouncement}</p>\n//             <p>{companyDetails.sharesOutstanding}</p>\n//             <p>{companyDetails.timestamp}</p>\n//             </div>\n\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default CompanyDetails;\n"],"mappings":"AAAA;;AAGA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}