{"ast":null,"code":"var _jsxFileName = \"/home/siddhi/InvestSavvy_coc_inheritance/practice projects/react projects/project1/dojo-blog/src/Resize.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResizableComponent = () => {\n  _s();\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Determine the layout based on the window width\n  const isWindowSnapped = windowWidth < 800; // Adjust the threshold as needed\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: isWindowSnapped ? '50%' : '100%',\n      transition: 'width 0.3s'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n};\n_s(ResizableComponent, \"XPjwYFA2mnyOQTDQkTW889KQ99c=\");\n_c = ResizableComponent;\nexport default ResizableComponent;\nvar _c;\n$RefreshReg$(_c, \"ResizableComponent\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ResizableComponent","_s","windowWidth","setWindowWidth","window","innerWidth","handleResize","addEventListener","removeEventListener","isWindowSnapped","style","width","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/siddhi/InvestSavvy_coc_inheritance/practice projects/react projects/project1/dojo-blog/src/Resize.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst ResizableComponent = () => {\n  const [windowWidth, setWindowWidth] = useState(window.innerWidth);\n\n  useEffect(() => {\n    const handleResize = () => {\n      setWindowWidth(window.innerWidth);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Determine the layout based on the window width\n  const isWindowSnapped = windowWidth < 800; // Adjust the threshold as needed\n\n  return (\n    <div style={{ width: isWindowSnapped ? '50%' : '100%', transition: 'width 0.3s' }}>\n      {/* Your component content */}\n    </div>\n  );\n};\n\nexport default ResizableComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAACQ,MAAM,CAACC,UAAU,CAAC;EAEjER,SAAS,CAAC,MAAM;IACd,MAAMS,YAAY,GAAGA,CAAA,KAAM;MACzBH,cAAc,CAACC,MAAM,CAACC,UAAU,CAAC;IACnC,CAAC;IAEDD,MAAM,CAACG,gBAAgB,CAAC,QAAQ,EAAED,YAAY,CAAC;IAE/C,OAAO,MAAM;MACXF,MAAM,CAACI,mBAAmB,CAAC,QAAQ,EAAEF,YAAY,CAAC;IACpD,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMG,eAAe,GAAGP,WAAW,GAAG,GAAG,CAAC,CAAC;;EAE3C,oBACEH,OAAA;IAAKW,KAAK,EAAE;MAAEC,KAAK,EAAEF,eAAe,GAAG,KAAK,GAAG,MAAM;MAAEG,UAAU,EAAE;IAAa;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE7E,CAAC;AAEV,CAAC;AAACf,EAAA,CAvBID,kBAAkB;AAAAiB,EAAA,GAAlBjB,kBAAkB;AAyBxB,eAAeA,kBAAkB;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}